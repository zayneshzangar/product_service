// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=internal/service/mocks/mock_product_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "product_service/internal/entity"
	productpb "product_service/internal/productpb"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
	isgomock struct{}
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductService) CreateProduct(name, description string, price float64, stock int64) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", name, description, price, stock)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductServiceMockRecorder) CreateProduct(name, description, price, stock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductService)(nil).CreateProduct), name, description, price, stock)
}

// DeleteProduct mocks base method.
func (m *MockProductService) DeleteProduct(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductServiceMockRecorder) DeleteProduct(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductService)(nil).DeleteProduct), id)
}

// GetAllProducts mocks base method.
func (m *MockProductService) GetAllProducts() ([]*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductServiceMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductService)(nil).GetAllProducts))
}

// GetProductByID mocks base method.
func (m *MockProductService) GetProductByID(id int64) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", id)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductServiceMockRecorder) GetProductByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductService)(nil).GetProductByID), id)
}

// UpdateProduct mocks base method.
func (m *MockProductService) UpdateProduct(product *entity.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductServiceMockRecorder) UpdateProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductService)(nil).UpdateProduct), product)
}

// MockGrpcService is a mock of GrpcService interface.
type MockGrpcService struct {
	ctrl     *gomock.Controller
	recorder *MockGrpcServiceMockRecorder
	isgomock struct{}
}

// MockGrpcServiceMockRecorder is the mock recorder for MockGrpcService.
type MockGrpcServiceMockRecorder struct {
	mock *MockGrpcService
}

// NewMockGrpcService creates a new mock instance.
func NewMockGrpcService(ctrl *gomock.Controller) *MockGrpcService {
	mock := &MockGrpcService{ctrl: ctrl}
	mock.recorder = &MockGrpcServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrpcService) EXPECT() *MockGrpcServiceMockRecorder {
	return m.recorder
}

// GetProductStock mocks base method.
func (m *MockGrpcService) GetProductStock(ctx context.Context, req *productpb.ProductStockRequest) (*productpb.ProductStockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductStock", ctx, req)
	ret0, _ := ret[0].(*productpb.ProductStockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductStock indicates an expected call of GetProductStock.
func (mr *MockGrpcServiceMockRecorder) GetProductStock(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductStock", reflect.TypeOf((*MockGrpcService)(nil).GetProductStock), ctx, req)
}

// UpdateProductStock mocks base method.
func (m *MockGrpcService) UpdateProductStock(ctx context.Context, req *productpb.UpdateProductStockRequest) (*productpb.UpdateProductStockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStock", ctx, req)
	ret0, _ := ret[0].(*productpb.UpdateProductStockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductStock indicates an expected call of UpdateProductStock.
func (mr *MockGrpcServiceMockRecorder) UpdateProductStock(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStock", reflect.TypeOf((*MockGrpcService)(nil).UpdateProductStock), ctx, req)
}
